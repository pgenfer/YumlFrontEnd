using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Reactive.Concurrency;
using System.Reactive.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Threading;
using Caliburn.Micro;
using Yuml;
using static System.IO.Path;

namespace YumlFrontEnd.editor
{
    /// <summary>
    /// receives updates events from the message system whenever
    /// the domain model changes and updates the render view with
    /// the new image generated by the web service.
    /// </summary>
    public class RendererViewModel : PropertyChangedBase
    {
        private readonly Diagram _diagram;
        private readonly ApplicationSettings _settings;
        private readonly HttpClient _yumleHttpConnection = new HttpClient();
        private string _uriToDiagram;
        private string _lastDslText = string.Empty;

        public RendererViewModel(
            Diagram diagram,
            ApplicationSettings settings,
            MessageSystem messageSystem)
        {
            _diagram = diagram;
            _settings = settings;
            _yumleHttpConnection.BaseAddress = new Uri(settings.YumlBaseUrl);
            _yumleHttpConnection.DefaultRequestHeaders.Add("Accept-Language", "en-GB,en-US,de-DE,de-AT;q=0.8,en;q=0.6,ru;q=0.4");

            RegisterForDomainChanges(messageSystem);
            // update the diagram the first time
            UpdateDiagram();
        }

        /// <summary>
        /// react on a domain change event and update the
        /// diagram, but skip updates if they occure within 
        /// a defined time.
        /// </summary>
        /// <param name="messageSystem"></param>
        private void RegisterForDomainChanges(MessageSystem messageSystem)
        {
            var skipUpdateInterval = TimeSpan.FromSeconds(3);
            // react on the domain change event but skip all events
            // that happen within less than three seconds.
            Observable
                .FromEvent<IDomainEvent>(
                    x => messageSystem.DomainModelChanged += x,
                    x => messageSystem.DomainModelChanged -= x)
                .Throttle(skipUpdateInterval, Scheduler.Default)
                .Subscribe(_ => Task.Run(() => UpdateDiagram()));
        }

        /// <summary>
        /// create the new class diagram
        /// and send it to the webservice.
        /// Receive the result and render it via the web browser.
        /// </summary>
        private async void UpdateDiagram()
        {
            // write classifiers and relations to diagram
            var diagramWriter = new DiagramWriter();
            _diagram.WriteTo(diagramWriter);
            var diagramText = diagramWriter.ToString();

            // skip if diagram did not change
            if (diagramText == _lastDslText)
                return;

            // send diagram data to server
            _lastDslText = diagramText;
            var content = new Dictionary<string, string>
            {
                ["dsl_text"] = diagramText
            };

            // wait for response image URI
            try
            {
                var response = await _yumleHttpConnection.PostAsync(
                _settings.YumlDiagramRequestUri,
                new FormUrlEncodedContent(content));
                // the result is the file name of the cached png,
                // we remove the extension to access the resource
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadAsStringAsync();
                    var uri = $"{_settings.YumlBaseUrl}{GetFileNameWithoutExtension(result)}";
                    UriToDiagram = uri;
                }
                else
                {
                    // TODO: show some error message here (in HTML maybe?)
                }
            }
            catch (HttpRequestException exception)
            {
                // TODO: show correct error message here (in HTML maybe?)
            }
        }

        public string UriToDiagram
        {
            get { return _uriToDiagram; }
            set
            {
                _uriToDiagram = value;
                NotifyOfPropertyChange();
            }
        }
    }
}
